# Worktree Manager Configuration File Example
# Copy this file to .worktree.yml to use it.
# 
# Configuration file locations (in priority order):
# 1. .worktree.yml (repository root)
# 2. .git/worktree.yml

# Base directory for worktrees
# When you run 'wm add <name>', it will create worktree at '<worktrees_dir>/<name>'
# Default: "../" (parent directory of the main repository)
worktrees_dir: "../"

# Hook Configuration
# Define scripts to execute during worktree creation/removal.
hooks:
  # pre_add: Execute before creating a worktree
  # Default working directory: main repository
  pre_add:
    # commands: Array of commands to execute
    commands:
      - "echo '🚀 Preparing to create worktree: $WORKTREE_PATH'"
      - "echo 'Branch: $WORKTREE_BRANCH'"
    
    # pwd: Specify working directory (optional)
    # Available environment variables: $WORKTREE_MAIN, $WORKTREE_PATH, $WORKTREE_ABSOLUTE_PATH
    # pwd: "$WORKTREE_MAIN"  # default

  # post_add: Execute after creating a worktree
  # Default working directory: newly created worktree directory
  post_add:
    commands:
      - "echo '✅ Worktree created successfully!'"
      - "echo 'Current directory: $(pwd)'"
      - "bundle install"  # Auto-install dependencies
      - "cp .env.example .env || true"  # Copy environment configuration file
    
    # Worktree directory is the default, but can be changed if needed
    # pwd: "$WORKTREE_ABSOLUTE_PATH"  # default
    # pwd: "$WORKTREE_MAIN"  # To run in main repository

  # pre_remove: Execute before removing a worktree
  # Default working directory: worktree directory to be removed
  pre_remove:
    commands:
      - "echo '⚠️  Starting worktree removal: $WORKTREE_PATH'"
      - "git add -A || true"  # Add all changes
      - "git stash push -m 'Auto-stash before removing $WORKTREE_BRANCH' || true"  # Auto backup
    
    # stop_on_error: Whether to stop on command failure (default: true)
    stop_on_error: false  # Continue even if errors occur

  # post_remove: Execute after removing a worktree
  # Default working directory: main repository
  post_remove:
    commands:
      - "echo '🗑️  Worktree removed: $WORKTREE_PATH'"
      - "echo 'Branch cleanup completed.'"
    
    # To run in a specific directory
    # pwd: "/path/to/custom/directory"

# Available environment variables:
# - $WORKTREE_MAIN: Main repository path
# - $WORKTREE_MANAGER_ROOT: Main repository path (kept for compatibility)
# - $WORKTREE_PATH: Worktree relative path (e.g., ../feature-branch)
# - $WORKTREE_ABSOLUTE_PATH: Worktree absolute path
# - $WORKTREE_BRANCH: Branch name
# - $WORKTREE_FORCE: Whether force option is used ("true" or "")
# - $WORKTREE_SUCCESS: Whether operation succeeded (post hooks only, "true" or "false")

# Practical examples:

# 1. Automatic development environment setup
# post_add:
#   commands:
#     - "bundle install"
#     - "yarn install"
#     - "rake db:migrate"
#     - "code ."  # Open in VS Code

# 2. CI/CD pipeline integration
# post_add:
#   commands:
#     - "gh pr create --draft --title 'WIP: $WORKTREE_BRANCH' --body 'Auto-created by worktree manager'"
#   pwd: "$WORKTREE_ABSOLUTE_PATH"

# 3. Notification system
# post_add:
#   commands:
#     - "osascript -e 'display notification \"Worktree ready: $WORKTREE_BRANCH\" with title \"WorktreeManager\"'"
#   pwd: "$WORKTREE_MAIN"  # Run notifications from main directory

# 4. Create project-specific configuration file
# post_add:
#   commands:
#     - "cat > .worktree-config.yml << EOF
# branch: $WORKTREE_BRANCH
# created_at: $(date)
# path: $WORKTREE_ABSOLUTE_PATH
# EOF"

# Legacy format compatibility:
# The following previous formats are still supported:
# pre_add: "echo 'Simple command'"
# post_add:
#   - "echo 'Command 1'"
#   - "echo 'Command 2'"